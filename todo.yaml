swagger: '2.0'
info:
  version: '1.0'
  title: Todo API (タスク管理API)
host: 'localhost:8080'
basePath: '/api/v1'
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      email:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Task:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      completed:
        type: boolean
        default: false
        description: "タスクが完了しているかどうか。デフォルトはfalseです。"
  ErrorResponse:
    type: object
    properties:
      message:
        type: string
parameters:
  taskIdParam:
    name: id
    in: path
    type: integer
    required: true
    description: タスクのID
  taskBodyParam:
    name: タスク情報
    in: body
    required: true
    schema:
      $ref: '#/definitions/Task'
  userBodyParam:
    name: ユーザー情報
    in: body
    required: true
    schema:
      $ref: '#/definitions/User'
paths:
  /health:
    get:
      tags:
        - health
      summary: アプリケーションのヘルスチェック
      description: APIサーバーの健全性を確認するためのエンドポイント。
      responses:
        200:
          description: APIサーバーは正常に動作しています。
          examples:
            application/json:
              status: "OK"
        500:
          description: APIサーバーに問題があります。
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "サーバーエラーが発生しました。"
  /auth/signup:
    post:
      tags:
        - auth
      summary: ユーザーの新規登録
      parameters:
        - $ref: '#/parameters/userBodyParam'
      responses:
        201:
          description: 登録完了したユーザー
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              email:
                type: string
          examples:
            application/json:
              id: 1
              name: "太郎"
              email: "taro@example.com"
        400:
          description: ユーザー情報不正
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "ユーザー情報が不適切です"
  /auth/login:
    post:
      tags:
        - auth
      summary: ユーザーのログイン
      parameters:
        - $ref: '#/parameters/userBodyParam'
      responses:
        200:
          description: ログイン成功（JWTトークンも返す）
          schema:
            $ref: '#/definitions/Token'
          examples:
            application/json:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJtUTNjUzBXbFJtMGJRNH..."
        401:
          description: ユーザー認証失敗
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "ユーザー認証に失敗しました"
  /auth/logout:
    post:
      tags:
        - auth
      summary: ユーザーのログアウト
      security:
        - JWT: []
      responses:
        200:
          description: ログアウト成功
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "ログアウトが成功しました"
  /todos:
    post:
      tags:
        - todos
      summary: 新しいタスクの作成
      security:
        - JWT: []
      parameters:
        - name: タスク情報
          in: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
            properties:
              title:
                type: string
              description:
                type: string
              completed:
                type: boolean
                default: false
                description: "タスクが完了しているかどうか。デフォルトはfalseです。"
      responses:
        201:
          description: 作成完了したタスク
          schema:
            $ref: '#/definitions/Task'
          examples:
            application/json:
              id: 1
              title: "日本語の勉強"
              description: "英語から日本語への翻訳を50個行う"
              completed: false
        400:
          description: タスク情報不正
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "タスク情報が不適切です"
    get:
      tags:
        - todos
      summary: 全てのタスクの取得
      responses:
        200:
          description: タスク一覧
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
          examples:
            application/json:
              - id: 1
                title: "日本語の勉強"
                description: "英語から日本語への翻訳を50個行う"
                completed: false
              - id: 2
                title: "買い物リスト作成"
                description: "来週の食事メニューに合わせて買い物リストを作成する"
                completed: true
  /todos/{id}:
    parameters:
      - $ref: '#/parameters/taskIdParam'
    get:
      tags:
        - todos
      summary: タスクの詳細情報取得
      responses:
        200:
          description: タスクの詳細情報
          schema:
            $ref: '#/definitions/Task'
          examples:
            application/json:
              id: 1
              title: "日本語の勉強"
              description: "英語から日本語への翻訳を50個行う"
              completed: false
        404:
          description: タスクが見つからない
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "指定されたIDのタスクが見つかりません"
    put:
      tags:
        - todos
      summary: タスクの更新
      security:
        - JWT: []
      parameters:
        - $ref: '#/parameters/taskIdParam'
        - name: タスク情報
          in: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
            properties:
              title:
                type: string
              description:
                type: string
              completed:
                type: boolean
                description: "タスクが完了しているかどうか。更新時に指定します。"
      responses:
        200:
          description: 更新完了したタスク
          schema:
            $ref: '#/definitions/Task'
          examples:
            application/json:
              id: 1
              title: "更新されたタイトル"
              description: "更新された説明"
              completed: true
        400:
          description: タスク情報不正
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "タスク情報が不適切です"
        404:
          description: タスクが見つからない
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "指定されたIDのタスクが見つかりません"
    delete:
      tags:
        - todos
      summary: タスクの削除
      security:
        - JWT: []
      parameters:
        - $ref: '#/parameters/taskIdParam'
      responses:
        200:
          description: 削除されたタスク
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "タスクが正常に削除されました"
        404:
          description: タスクが見つからない
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              message: "指定されたIDのタスクが見つかりません"
